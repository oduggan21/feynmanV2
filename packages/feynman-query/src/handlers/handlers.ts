/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * feynman-api
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateSessionPayload,
  ErrorResponse,
  Session,
  UpdateSessionStatusPayload
} from '../feynmanApi.schemas';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary List all sessions for a user.
 */
export const listSessions = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Session[]>> => {
    
    
    return axios.get(
      `/sessions`,options
    );
  }


export const getListSessionsQueryKey = () => {
    return [`/sessions`] as const;
    }

    
export const getListSessionsQueryOptions = <TData = Awaited<ReturnType<typeof listSessions>>, TError = AxiosError<ErrorResponse>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listSessions>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListSessionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listSessions>>> = ({ signal }) => listSessions({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listSessions>>, TError, TData> & { queryKey: QueryKey }
}

export type ListSessionsQueryResult = NonNullable<Awaited<ReturnType<typeof listSessions>>>
export type ListSessionsQueryError = AxiosError<ErrorResponse>


/**
 * @summary List all sessions for a user.
 */

export function useListSessions<TData = Awaited<ReturnType<typeof listSessions>>, TError = AxiosError<ErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof listSessions>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getListSessionsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a new Feynman teaching session.
 */
export const createSession = (
    createSessionPayload: CreateSessionPayload, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Session>> => {
    
    
    return axios.post(
      `/sessions`,
      createSessionPayload,options
    );
  }



export const getCreateSessionMutationOptions = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSession>>, TError,{data: CreateSessionPayload}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createSession>>, TError,{data: CreateSessionPayload}, TContext> => {

const mutationKey = ['createSession'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSession>>, {data: CreateSessionPayload}> = (props) => {
          const {data} = props ?? {};

          return  createSession(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateSessionMutationResult = NonNullable<Awaited<ReturnType<typeof createSession>>>
    export type CreateSessionMutationBody = CreateSessionPayload
    export type CreateSessionMutationError = AxiosError<ErrorResponse>

    /**
 * @summary Create a new Feynman teaching session.
 */
export const useCreateSession = <TError = AxiosError<ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createSession>>, TError,{data: CreateSessionPayload}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof createSession>>,
        TError,
        {data: CreateSessionPayload},
        TContext
      > => {

      const mutationOptions = getCreateSessionMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Get a specific session by its ID.
 */
export const getSession = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Session>> => {
    
    
    return axios.get(
      `/sessions/${id}`,options
    );
  }


export const getGetSessionQueryKey = (id: string,) => {
    return [`/sessions/${id}`] as const;
    }

    
export const getGetSessionQueryOptions = <TData = Awaited<ReturnType<typeof getSession>>, TError = AxiosError<void | ErrorResponse>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSessionQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSession>>> = ({ signal }) => getSession(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSessionQueryResult = NonNullable<Awaited<ReturnType<typeof getSession>>>
export type GetSessionQueryError = AxiosError<void | ErrorResponse>


/**
 * @summary Get a specific session by its ID.
 */

export function useGetSession<TData = Awaited<ReturnType<typeof getSession>>, TError = AxiosError<void | ErrorResponse>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSession>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetSessionQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update the status of a session.
 */
export const updateSessionStatus = (
    id: string,
    updateSessionStatusPayload: UpdateSessionStatusPayload, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Session>> => {
    
    
    return axios.patch(
      `/sessions/${id}/status`,
      updateSessionStatusPayload,options
    );
  }



export const getUpdateSessionStatusMutationOptions = <TError = AxiosError<void | ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSessionStatus>>, TError,{id: string;data: UpdateSessionStatusPayload}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateSessionStatus>>, TError,{id: string;data: UpdateSessionStatusPayload}, TContext> => {

const mutationKey = ['updateSessionStatus'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateSessionStatus>>, {id: string;data: UpdateSessionStatusPayload}> = (props) => {
          const {id,data} = props ?? {};

          return  updateSessionStatus(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateSessionStatusMutationResult = NonNullable<Awaited<ReturnType<typeof updateSessionStatus>>>
    export type UpdateSessionStatusMutationBody = UpdateSessionStatusPayload
    export type UpdateSessionStatusMutationError = AxiosError<void | ErrorResponse>

    /**
 * @summary Update the status of a session.
 */
export const useUpdateSessionStatus = <TError = AxiosError<void | ErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateSessionStatus>>, TError,{id: string;data: UpdateSessionStatusPayload}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updateSessionStatus>>,
        TError,
        {id: string;data: UpdateSessionStatusPayload},
        TContext
      > => {

      const mutationOptions = getUpdateSessionStatusMutationOptions(options);

      return useMutation(mutationOptions );
    }
    